openapi: 3.0.0
info:
  title: Admin API Documentation
  version: 1.0.0

servers:
  - url: https://phoenixdev.online/api

tags:
  - name: Admin
    description: Admin-related operations
  - name: User
    description: User-related operations
  - name: AdImages
    description: Operations related to ad images
  - name: Bookings
    description: Operations related to bookings
  - name: Packages
    description: Operations related to packages
  - name: Itineraries
    description: Operations related to itineraries
  - name: JWT
    description: JWT token operations
  
paths:
  /adimages:
    
    get:
      tags: 
        - AdImages
      summary: List Ad Images
      responses:
        '200':
          description: List of ad images retrieved successfully
    post:
      tags: 
        - AdImages
      summary: Create Ad Image
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AdImageCreate'
      responses:
        '201':
          description: Ad image created successfully
        '401':
          description: Unauthorized
        '400':
          description: Bad request

  /adimages/{id}:
    get:
      tags: 
        - AdImages
      summary: Get Ad Image Details
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Ad image details retrieved successfully
        '404':
          description: Ad image not found
    put:
      tags: 
        - AdImages
      summary: Update Ad Image
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AdImageUpdate'
      responses:
        '200':
          description: Ad image updated successfully
        '401':
          description: Unauthorized
        '404':
          description: Ad image not found
        '400':
          description: Bad request
    
    delete:
      tags: 
        - AdImages
      summary: Delete Ad Image
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Ad image deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Ad image not found

    
  /admin/register:
    post:
      tags: 
        - Admin
      summary: Admin Registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminRegistration'
      responses:
        '200':
          description: Admin registered successfully
        '400':
          description: Bad request

  /admin/login:
    post:
      tags: 
        - Admin
      summary: Admin Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminLogin'
      responses:
        '200':
          description: Admin logged in successfully
        '401':
          description: Unauthorized
        '400':
          description: Bad request

  /admin/forgot-password:
    post:
      tags: 
        - Admin
      summary: Admin Forgot Password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminForgotPassword'
      responses:
        '200':
          description: Password reset link sent successfully
        '400':
          description: Bad request

  /admin/reset-password/{token}:
    post:
      tags: 
        - Admin
      summary: Admin Reset Password
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminResetPassword'
      responses:
        '200':
          description: Password reset successful
        '400':
          description: Bad request

  /admin/profile:
    get:
      tags: 
        - Admin
      summary: Admin Profile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Admin profile retrieved successfully
        '401':
          description: Unauthorized

  /admin/stats/{groupBy}:
    get:
      tags: 
        - Admin
      summary: Admin Dashboard Statistics
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: groupBy
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Dashboard statistics retrieved successfully
        '401':
          description: Unauthorized

  /admin/logout:
    get:
      tags: 
        - Admin
      summary: Admin Logout
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Admin logged out successfully
        '401':
          description: Unauthorized

  /admin/change-password:
    post:
      tags: 
        - Admin
      summary: Admin Change Password
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminChangePassword'
      responses:
        '200':
          description: Password changed successfully
        '401':
          description: Unauthorized
        '400':
          description: Bad request

  /admin/delete/user/{id}:
    delete:
      tags: 
        - Admin
      summary: Admin Delete User
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User deleted successfully
        '401':
          description: Unauthorized

  /admin/delete/admin/{id}:
    delete:
      tags: 
        - Admin
      summary: Admin Delete Admin
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Admin deleted successfully
        '401':
          description: Unauthorized
  
  /user/register:
    post:
      tags:
        - User
      summary: User Registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '200':
          description: User registered successfully
        '400':
          description: Bad request

  /user/login:
    post:
      tags:
        - User
      summary: User Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: User logged in successfully
        '401':
          description: Unauthorized
        '400':
          description: Bad request

  /user/forgot-password:
    post:
      tags:
        - User
      summary: User Forgot Password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserForgotPassword'
      responses:
        '200':
          description: Password reset link sent successfully
        '400':
          description: Bad request

  /user/reset-password/{token}:
    post:
      tags:
        - User
      summary: User Reset Password
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserResetPassword'
      responses:
        '200':
          description: Password reset successful
        '400':
          description: Bad request

  /user/profile:
    get:
      tags:
        - User
      summary: User Profile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
        '401':
          description: Unauthorized

  /user/logout:
    get:
      tags:
        - User
      summary: User Logout
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User logged out successfully
        '401':
          description: Unauthorized

  /user/change-password:
    post:
      tags:
        - User
      summary: User Change Password
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserChangePassword'
      responses:
        '200':
          description: Password changed successfully
        '401':
          description: Unauthorized
        '400':
          description: Bad request
  
  
  /bookings:
    get:
      tags:
        - Bookings
      summary: List All Bookings
      responses:
        '200':
          description: List of bookings retrieved successfully

  /bookings/{id}:
    get:
      tags:
        - Bookings
      summary: Get Booking Details
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Booking details retrieved successfully
        '404':
          description: Booking not found

  /bookings/user/booking:
    get:
      tags:
        - Bookings
      summary: Get Bookings of a User
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of user's bookings retrieved successfully
        '401':
          description: Unauthorized

  /bookings/package/{id}:
    get:
      tags:
        - Bookings
      summary: Get Bookings by Package
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of bookings for the package retrieved successfully
        '401':
          description: Unauthorized

  /bookings/cancel/{id}:
    get:
      tags:
        - Bookings
      summary: Cancel Booking
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Booking canceled successfully
        '401':
          description: Unauthorized
        '404':
          description: Booking not found

  /bookings/create:
    post:
      tags:
        - Bookings
      summary: Create Booking
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingCreate'
      responses:
        '201':
          description: Booking created successfully
        '401':
          description: Unauthorized
        '400':
          description: Bad request

  /bookings/confirm-booking:
    post:
      tags:
        - Bookings
      summary: Confirm Payment for Booking
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmBooking'
      responses:
        '200':
          description: Booking payment confirmed
        '401':
          description: Unauthorized
        '400':
          description: Bad request
          
  /packages:
    get:
      tags:
        - Packages
      summary: List Packages
      responses:
        '200':
          description: List of packages retrieved successfully
          
    post:
      tags:
        - Packages
      summary: Create Package
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PackageCreate'
      responses:
        '201':
          description: Package created successfully
        '401':
          description: Unauthorized
        '400':
          description: Bad request

  /packages/{id}:
    get:
      tags:
        - Packages
      summary: Get Package Details
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Package details retrieved successfully
        '404':
          description: Package not found
    
    put:
      tags:
        - Packages
      summary: Update Package
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PackageUpdate'
      responses:
        '200':
          description: Package updated successfully
        '401':
          description: Unauthorized
        '404':
          description: Package not found
        '400':
          description: Bad request
    
    delete:
      tags:
        - Packages
      summary: Delete Package
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Package deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Package not found
          
    
  /itineraries:
    get:
      tags:
        - Itineraries
      summary: List Itineraries
      responses:
        '200':
          description: List of itineraries retrieved successfully

  /itineraries/{id}:
    get:
      tags:
          - Itineraries
      summary: Get Itinerary Details
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Itinerary details retrieved successfully
        '404':
          description: Itinerary not found
    
    delete:
      tags:
        - Itineraries
      summary: Delete Itinerary
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Itinerary deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Itinerary not found

  /itineraries/user:
    get:
      tags:
        - Itineraries
      summary: Get User Itineraries
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of user's itineraries retrieved successfully
        '401':
          description: Unauthorized

  /itineraries/booking/{id}:
    get:
      tags:
        - Itineraries
      summary: Get Itinerary by Booking ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Itinerary retrieved successfully
        '404':
          description: Itinerary not found
          
  
  /jwt/check:
    post:
      tags:
        - JWT
      summary: Check Token Validity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenCheck'
      responses:
        '200':
          description: Token is valid
        '401':
          description: Token is invalid or expired



components:
  schemas:
    AdminRegistration:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        password:
          type: string
        password_confirmation:
          type: string
        

    AdminLogin:
      type: object
      properties:
        email:
          type: string
        password:
          type: string

    AdminForgotPassword:
      type: object
      properties:
        email:
          type: string

    AdminResetPassword:
      type: object
      properties:
        password:
          type: string
        password_confirmation:
          type: string

    AdminChangePassword:
      type: object
      properties:
        current_password:
          type: string
        new_password:
          type: string
        new_password_confirmation:
          type: string
    UserRegistration:
      type: object
      properties:
        name:
          type: string
        email:
          type: string 
        phone:
          type: string
        password:
          type: string
        password_confirmation:
          type: string
          
    UserLogin:
      type: object
      properties:
        email:
          type: string
        password:
          type: string

    UserForgotPassword:
      type: object
      properties:
        email:
          type: string

    UserResetPassword:
      type: object
      properties:
        password:
          type: string
        password_confirmation:
          type: string

    UserChangePassword:
      type: object
      properties:
        current_password:
          type: string
        new_password:
          type: string
        new_password_confirmation:
          type: string
    
    AdImageCreate:
      type: object
      properties:
        image:
          type: string
          format: binary
        description:
          type: string

    AdImageUpdate:
      type: object
      properties:
        image:
          type: string
          format: binary
        description:
          type: string
    
    BookingCreate:
      type: object
      properties:
        package_id:
          type: string

    ConfirmBooking:
      type: object
      properties:
        payment_id:
          type: string
          
    
    PackageCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
        available_slots:
          type: integer

    PackageUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
        available_slots:
          type: integer
          
    TokenCheck:
        type: object
        properties:
          token:
            type: string

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
